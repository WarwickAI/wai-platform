type User
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "id", identityClaim: "sub", operations: [read] },
      { allow: groups, groups: ["Admin"], operations: [create, read, update, delete] }
    ]
  ) {
  id: ID!
  username: String
  email: String
  # showInLeaderboard: Boolean
  # badges: String[]
  # colour: String
}

type Talk
  @model
  @auth(rules: [{ allow: public }])
  @key(name: "talksByShortName", fields: ["shortName"], queryField: "talksByShortName") {
  id: ID!
  title: String!
  logo: String
  cover: String
  display: Boolean
  createdAt: AWSDate
  description: String
  joinLink: String
  shortName: String!
  duration: String
  startDateAndTime: AWSDateTime
}

type Course
  @model
  @auth(rules: [{ allow: public }])
  @key(name: "coursesByShortName", fields: ["shortName"], queryField: "coursesByShortName") {
  id: ID!
  title: String!
  logo: String
  cover: String
  display: Boolean
  createdAt: AWSDate
  description: String
  joinLink: String
  shortName: String!
  duration: String
  startDate: AWSDate
}

enum ProjectDifficulty {
  INTRODUCTORY
  INTERMEDIATE
  ADVANCED
}

enum GroupType {
  PROJECT
  TALK
  COURSE
}

type Group @model @auth(rules: [{ allow: public }]) {
  id: ID!
  type: GroupType
  description: String
  name: String!
}

type Project
  @model
  @auth(rules: [{ allow: public }, { allow: private, operations: [read] }])
  @key(name: "projectsByShortName", fields: ["shortName"], queryField: "projectsByShortName") {
  id: ID!
  title: String
  logo: AWSURL
  cover: AWSURL
  display: Boolean
  createdAt: AWSDate
  description: String
  joinLink: AWSURL
  shortName: String!
  difficulty: ProjectDifficulty
}
